<?xml version="1.0" encoding="utf-8"?>
<mx:Application xmlns:mx="http://www.adobe.com/2006/mxml" 
	layout="horizontal"
	backgroundColor="black"
	creationComplete="initApp();initCollections();getAllConcepts.send();currentState='showQuery'"
	keyDown="keyHandler(event)"
	>

	<mx:Script>
		<![CDATA[

		//-----------------------------
		//   <Popup Code> 
		//----------------------------



		/* Dispatches an HTTP request to find get the translated
		 * query for a specific engine (currently all engines use
		 * the same query, so we do not specify an engine 
		 */
		private function showQuery(evt:MouseEvent):void {

			/* The engine var is not currently used, but can be useful
			 * later when each engine needs a custom query instead of
			 * all engines having the same query. 
			 */
			var engine:String = evt.target.label;

			getQuery.send();
		}



		/* 
		 * This function gets the data back from the HTTP call
		 * and displays the query in the pop-up box.
		 */
		public function displayQuery(query:ResultEvent):void {

			Alert.show("Query: " + query.result.toString());
		}



		//-----------------------------
		//   </Popup Code> 
		//----------------------------


		//-----------------------------
		//    Menu Code
		//----------------------------

		import mx.events.MenuEvent;
		    import mx.controls.Alert;
		    import mx.collections.*;

		    [Bindable]
		    public var menuBarCollection:XMLListCollection;
	    
		    private var menubarXML:XMLList =<>
			<menuitem label="Concepts">
			    <menuitem label="New" data="1A"/>
			    <menuitem label="Edit" data="1B"/>
			</menuitem>
			<menuitem label="Query">
			    <menuitem label="Show Query" data="2A"/>
			</menuitem>
			<menuitem label="Help">
			    <menuitem label="Help" data="3A"/>
			</menuitem>
			</>
			
		    // Event handler to initialize the MenuBar control.
		    private function initCollections():void {
			menuBarCollection = new XMLListCollection(menubarXML);
		    }
		    
		    // Event handler for the MenuBar control's change event.
		    private function changeHandler(event:MenuEvent):void  {
			// Only open the Alert for a selection in a pop-up submenu.
			// The MenuEvent.menu property is null for a change event 
			// dispatched by the menu bar.
			if (event.menu != null) {
				var theGoods:String;
				theGoods = event.item.@data;
				switch (theGoods)
				{
				//	case "1A":	Alert.show("Now using SQLGen Engine");
				//			break;
					case "1A":	currentState='newConcept';
							break;
					case "1B":	currentState='editConcept';
							break;
					case "2A":	currentState='showQuery';
							break;
					case "3A":	currentState='showHelp';
							break;
				}
			}                    
		    }

		    // Event handler for the MenuBar control's itemRollOver event.
		    private function rollOverHandler(event:MenuEvent):void {
			//rollOverTextArea.text = "type: " + event.type + "\n";
			//rollOverTextArea.text += "target menuBarIndex: " + event.index + "\n";
		    }           

		    // Event handler for the MenuBar control's itemClick event.
		    private function itemClickHandler(event:MenuEvent):void {
			//itemClickTextArea.text = "type: " + event.type + "\n";
			//itemClickTextArea.text += "target menuBarIndex: " + event.index + "\n";
		    }           


		//----------------------------
		//	END MENU CODE
		//----------------------------




		//----------------
		// Double Click
		//----------------

            import mx.rpc.events.ResultEvent;


		    private function appendText(e:Event):void {
			//var now:String = "lawlcatz";
			var now:Object = e.currentTarget.value;
			//var now:Object = e.currentTarget.selectedIndex;
			//newConceptString.dataProvider.addItem(now);
		    }
		//---------------
		// End Double Click
		//---------------


		//----------------
		// PHP Shit
		//----------------

		//-----------------
		// End PHP Shit
		//-----------------

		import mx.collections.ArrayCollection;

		[Bindable]
		private var antonymsList:ArrayCollection;

		private function lawl():void
		{
			//query.dataProvider.addItem(term.text);
			//newConceptString.dataProvider.addItem(term.text);
		}

		//------------------------
		// Start Drag and Drop
		//------------------------

            import mx.managers.DragManager;
            import mx.events.DragEvent;
            import mx.collections.ArrayCollection;

						import flash.events.KeyboardEvent;


						public function handleTranslation(event:ResultEvent):void
						{
							debugArea.text = event.result.toString();
						}

						[Bindable] 
						private var prevKeys:Array = new Array();

						private function keyHandler(event:KeyboardEvent):void
						{
							var key:String = String.fromCharCode(event.keyCode);
							var keyCode:int = event.keyCode;
							debugArea.text = keyCode.toString();
							
							if (keyCode == 221)
							{

								debugArea.text = prevKeys.toString();
								translateToConcept.send();

								/* Empty out the array -- hurray for no empty method...fucking flex */
								prevKeys = [];
								//debugArea.text = "CLEAR";
							}
							else if(keyCode == 8)
							/* User hit delete, so pop off the last char */
							{
								prevKeys.pop();
								debugArea.text = prevKeys.toString();
							}
							else if(keyCode == 219 || prevKeys.length > 0)
							{
								if(keyCode > 47 && keyCode < 91 || keyCode == 219 || keyCode == 32)
								{
									prevKeys.push(key);
								}
								debugArea.text = prevKeys.toString();
							}
							
						}
    
		[Bindable]
		public var conceptsArray:ArrayCollection = new ArrayCollection([]);

            private function initApp():void {
	//							stage.addEventListener(KeyboardEvent.KEY_DOWN, keyDown);	

             //   firstList.dataProvider = new ArrayCollection([
             //       {label:"(", data:"("},
             //       {label:")", data:")"},
             //       {label:String.fromCharCode(0x222A), data:String.fromCharCode(0x222A)},
             //       {label:String.fromCharCode(0x2229), data:String.fromCharCode(0x2229)}
             //   ]);

                //newConceptString.dataProvider = new ArrayCollection([]);

		//query.dataProvider = new ArrayCollection([]);

        //        synonymsList.dataProvider = new ArrayCollection([
	//		{label:"lawl", data:"lawl"},
	//		{label:"catz", data:"catz"},
	//		{label:"wham", data:"wham"}
	//		]);

        //        antonymsList = new ArrayCollection([
	//		{label:"unl337", data:"unl337"},
	//		{label:"blanko el gato", data:"blanko el gato"},
	//		{label:"50 cent", data:"50 cent"}
	//		]);
            }


	//private function keyDown(event:KeyboardEvent):void
	//{
	//	debugArea.text = (event.charCode).toString();
	//}

		[Bindable]
		public var queryArray:ArrayCollection;
		//public var queryArray:Array;

		private function setQuery():void {
			//query.dataProvider.addItem(newConceptString);
			currentState = 'showQuery';
			//queryArray.addItem(newConceptString);
		}

            // Variable to store original border color.
            private var tempBorderColor:uint;
            
            // Flag to indicate that tempBorderColor has been set.
            private var borderColorSet:Boolean = false;

            private function dragOverHandler(event:DragEvent):void {
            
                // Explpicitly handle the dragOver event.            
                event.preventDefault();
                
                // Since you are explicitly handling the dragOver event,
                // call showDropFeedback(event) to have the drop target
                // display the drop indicator.
                // The drop indicator is removed
                // automatically for the list controls by the built-in 
                // event handler for the dragDrop event.
                event.currentTarget.showDropFeedback(event);
            
                if (event.dragSource.hasFormat("items"))
                {
                    // Set the border to green to indicate that 
                    // this is a drop target.
                    // Since the dragOver event is dispatched continuosly 
                    // as you move over the drop target, only set it once.
                    if (borderColorSet == false) {                 
                        tempBorderColor = 
                            event.currentTarget.getStyle('borderColor');
                        borderColorSet = true;
                    }
                
                    // Set the drag-feedback indicator based on the 
                    // type of drag-and-drop operation.
                    event.currentTarget.setStyle('borderColor', 'green');
                    if (event.ctrlKey) {                    
                        DragManager.showFeedback(DragManager.COPY);
                        return;
                    }
                    else if (event.shiftKey) {
                        DragManager.showFeedback(DragManager.LINK);
                        return;
                    }
                    else {
                        DragManager.showFeedback(DragManager.MOVE);
                        return;
                    }
                }

                // Drag not allowed.
                DragManager.showFeedback(DragManager.NONE);                
            }
            
            private function dragDropHandler(event:DragEvent):void {
                dragExitHandler(event);
            }            

            // Restore the border color.
            private function dragExitHandler(event:DragEvent):void {
              event.currentTarget.setStyle('borderColor', tempBorderColor);
              borderColorSet = true;
            }

		//------------------------
		// Stop Drag and Drop
		//------------------------

		import mx.rpc.events.ResultEvent;
		import mx.rpc.events.FaultEvent;






	   [Bindable]
	   private var allConcepts:XMLList;
	   private var queryResults:XMLList;

	   public var queryResultsString:String = null;
	   private var conceptData:XMLList;




		/************************************
		 *  All data for the tabbed query state
		 ************************************/
            import mx.events.ItemClickEvent;
            import mx.controls.TabBar;

		/* PARSE QUERYRESULTS XML AND SET EACH CHILD NODE TO THE
		 * DATA FOR EACH ENTRY IN THE ARRAY BELOW!!! */
            [Bindable]
            public var queryResultsArray:Array = [
								{label:"Lucid", data:"Loading results..."},
                {label:"Oracle", data:"Loading results..."},
                {label:"Lucene", data:"Loading results..."}
            ];
            

				[Bindable]
				private var resultsArray:ArrayCollection;
				private var LuceneResults:ArrayCollection;


    		private function clickEvt(event:ItemClickEvent):void {
    			// Access target TabBar control.
    			var targetComp:TabBar = TabBar(event.currentTarget);

					var index:int = event.index;
					resultsGrid.dataProvider = queryResultsArray[index]["data"];
    		}


	        public function handleXML(event:ResultEvent):void
            {
                allConcepts = event.result.file as XMLList;
            }

	    /* Handles the query XML results */
	    public function handleLucidResults(event:ResultEvent):void
			{
          queryResultsArray[0]["data"] = event.result.doc;
			}

	    public function handleOracleResults(event:ResultEvent):void
			{
          queryResultsArray[1]["data"] = event.result.doc;
			}	    

			public function handleLuceneResults(event:ResultEvent):void
			{
					//resultsGrid.dataProvider = event.result.doc;
          queryResultsArray[2]["data"] = event.result.doc;
					//debugArea.text = event.result.toString();
			}

	        public function handleFault(event:FaultEvent):void
	        {
	           Alert.show(event.fault.faultString, "Error");
	        }

		public function handleXMLUpdateEditForm(event:ResultEvent):void
		{
			//conceptData = event.result as XMLList;
			editThisConceptField.text = event.result.toString();
			//lawlcats.text = editThisConcept.selectedLabel;
		}

		public function preAuthorize():void
		{
			editThisConceptName.text = editThisConcept.selectedLabel;
		}
		//<name>{editThisConcept.selectedLabel}</name>

						[Bindable]
            private var dataX:XML =
								<results>
									<doc>
									<docno>1</docno>
									</doc>
								</results>;

		]]>
	</mx:Script>


   <mx:HTTPService result="handleTranslation(event);" fault="handleFault(event);" id="translateToConcept" resultFormat="text"
    	method="GET" url="ir-search.php" useProxy="false">
	    <mx:request xmlns="">
		<func>translateToConcept</func>
		<input>{debugArea.text}</input>
	    </mx:request>
	</mx:HTTPService>

   <mx:HTTPService result="handleXMLUpdateEditForm(event);" fault="handleFault(event);" id="getConceptData" resultFormat="text"
    	method="GET" url="ir-search.php" useProxy="false">
	    <mx:request xmlns="">
		<func>getConceptData</func>
		<name>{editThisConceptName.text}</name>
	    </mx:request>
	</mx:HTTPService>

   <mx:HTTPService result="handleXML(event);" fault="handleFault(event);" id="addConcept" resultFormat="text"
    	method="GET" url="ir-search.php" useProxy="false">
	    <mx:request xmlns="">
		<func>addConcept</func>
	        <input>{newConceptString.text}</input>
		<name>{newConceptName.text}</name>
	    </mx:request>
	</mx:HTTPService>

   <mx:HTTPService result="handleXML(event);" fault="handleFault(event);" id="getAllConcepts" resultFormat="e4x"
    	method="GET" url="ir-search.php" useProxy="false">
	    <mx:request xmlns="">
		<func>getAllConcepts</func>
	        <name>wwwjscom</name>
	    </mx:request>
    </mx:HTTPService>

   <mx:HTTPService result="handleXML(event);" fault="handleFault(event);" id="updateConceptData" resultFormat="text"
    	method="GET" url="ir-search.php" useProxy="false">
	    <mx:request xmlns="">
		<func>updateConceptData</func>
		<name>{editThisConceptName.text}</name>
		<input>{editThisConceptField.text}</input>
	    </mx:request>
    </mx:HTTPService>

   <mx:HTTPService result="handleLucidResults(event);" fault="handleFault(event);" id="queryLucid" resultFormat="text"
    	method="GET" url="ir-search.php" useProxy="false">
	    <mx:request xmlns="">
		<func>queryLucid</func>
		<input>{queryString.text}</input>
	    </mx:request>
    </mx:HTTPService>

   <mx:HTTPService result="handleOracleResults(event);" fault="handleFault(event);" id="queryOracle" resultFormat="text"
    	method="GET" url="ir-search.php" useProxy="false">
	    <mx:request xmlns="">
		<func>queryOracle</func>
		<input>{queryString.text}</input>
	    </mx:request>
    </mx:HTTPService>

   <mx:HTTPService result="handleLuceneResults(event);" fault="handleFault(event);" id="queryLucene" resultFormat="e4x"
    	method="GET" url="ir-search.php" useProxy="false">
	    <mx:request xmlns="">
		<func>queryLucene</func>
		<input>{queryString.text}</input>
	    </mx:request>
    </mx:HTTPService>

   <mx:HTTPService result="displayQuery(event);" fault="handleFault(event);" id="getQuery" resultFormat="text"
    	method="GET" url="ir-search.php" useProxy="false">
	    <mx:request xmlns="">
		<func>translateQuery</func>
		<input>{queryString.text}</input>
	    </mx:request>
    </mx:HTTPService>

    <mx:Glow id="glowImage" duration="1000" 
        alphaFrom="1.0" alphaTo="0.3" 
        blurXFrom="0.0" blurXTo="50.0" 
        blurYFrom="0.0" blurYTo="50.0" 
        color="0x00FF00"/>
    <mx:Glow id="unglowImage" duration="1000" 
        alphaFrom="0.3" alphaTo="1.0" 
        blurXFrom="50.0" blurXTo="0.0" 
        blurYFrom="50.0" blurYTo="0.0" 
        color="0x0000FF"/>


<!-- May contain some helpful code about wrapping our test arround the box.  http://livedocs.adobe.com/flex/3/html/help.html?content=behaviors_09.html -->


	<!-- Define one view state, in addition to the base state.-->
	<mx:states>

		<mx:State name="showHelp">
			<mx:AddChild relativeTo="{loginPanel}" position="firstChild">
				<mx:target>
					<mx:Text width="100%">
						<mx:htmlText>
<![CDATA[
The IIT Query Builder is designed to allow users to issue complex queries to search engines without learning all the arcane details of each query language for each search engine. 
<br />
Users are first encouraged to group related words and phrases into concepts.  This dramatically simplifies the core structure of a query. 
<br />
For example, a query might contain hundreds of city names.  A concept called Europe (note this a pre-laoded concept) might have all the capitals of all the cities in Europe (e.g.; Paris, Zurich, etc.)
<br />
Now a query that is searching for cars made in Europe might be of the form:
<br />
<b><i>{cars} and {Europe}</i></b>
<br />
where {cars} is a concept and Europe is a concept.  The system allows users to add, delete, edit concepts so that long lists of terms, phrases, as well as wildcarded terms and phrases, and proximity operators are embedded into a concept.   Additionally, users may import / export a list of terms or phrases into a concept (CSV files are currently supported). 
<br />
To implement a wildcard simple enter a * to indicate 0 or more characters and a _ to indicate a single character.  The term  a* will find all occurences of words that start with an a.  The term a_ will find all occurences of two letter words that start with an a. 
<br />
To implement proximity operators, click on the "NEAR" button next to the new term.  You will be prompted for another term or phrase and an indicator of how close to the term or phrase you would like to see the word.  For example "new york" NEAR "Statue of Liberty" can be searched so that it occurs within a certain number of words, in the same sentence or in the same paragraph.  Note that some search engines may not support variations on proximity operator and the user will be notified of any limitations for a given proximity request.  The reality is that proximity operators are often the cause of a quite a bit of variation in different search engines. 
]]>

						</mx:htmlText>
					</mx:Text>
				</mx:target>
			</mx:AddChild>
			<mx:SetProperty target="{loginPanel}" name="title" value="Help"/>
		</mx:State>

	<!-- Define one view state, in addition to the base state.-->
		<mx:State name="conceptAdded">
			<mx:AddChild relativeTo="{loginPanel}" position="firstChild">
				<mx:target>
					<mx:LinkButton id="viewQuery" label="View Query" click="currentState='showQuery'"/>
				</mx:target>
			</mx:AddChild>
			<mx:SetProperty target="{loginPanel}" name="title" value="Concept Added!"/>
		</mx:State>

		<!-- This is the query results state -->
		<mx:State name="queryResults">
			<mx:AddChild relativeTo="{loginPanel}" position="firstChild">
				<mx:target>
					<mx:VBox
					height="100%"
					width="100%"
					>
	
						<mx:HBox borderStyle="solid" paddingTop="10" paddingBottom="10" 
               paddingLeft="10" paddingRight="10">
							<mx:Label text="Show query for: " />
							<mx:Button label="Lucid" click="showQuery(event)" />
							<mx:Button label="Oracle" click="showQuery(event)" />
							<mx:Button label="Lucene" click="showQuery(event)" />
						</mx:HBox>				

						<mx:TabBar itemClick="clickEvt(event);" id="queryResultsTab">
						    <mx:dataProvider>{queryResultsArray}</mx:dataProvider>
						</mx:TabBar>
			
						<mx:DataGrid id="resultsGrid"
							width="100%"
							height="100%"
							>
							<mx:columns>
								<mx:DataGridColumn headerText="DocNo"
									width="70"
									dataField="docno"/>
								<mx:DataGridColumn headerText="Title"
									width="175"
									dataField="title"
									wordWrap="true"
									/>
								<mx:DataGridColumn headerText="Snippet"
									wordWrap="true"
									dataField="snippet">
									<mx:itemRenderer>
										<mx:Component>
											<mx:TextArea htmlText="{data.snippet}"/>
										</mx:Component>
									</mx:itemRenderer>
								</mx:DataGridColumn>
									</mx:columns>

									</mx:DataGrid>


					</mx:VBox>
				</mx:target>
			</mx:AddChild>
			<mx:SetProperty target="{loginPanel}" name="title" value="Query Results 2"/>
		</mx:State>
		<!-- End Query Results State -->

		<mx:State name="showQuery">
			<mx:AddChild relativeTo="{loginPanel}" position="lastChild">
				<mx:target>
					<mx:VBox width="100%" height="100%">
						<!--<mx:Label text="Query" left="10" top="10"/>-->

						<mx:HBox borderStyle="solid" paddingTop="10" paddingBottom="10" 
               paddingLeft="10" paddingRight="10">

							<mx:HBox borderStyle="solid" paddingTop="10" paddingBottom="10" 
								 paddingLeft="10" paddingRight="10">
								 <mx:Label text="Show query for: " />
								 <mx:Button label="Lucid" click="showQuery(event)" />
								 <mx:Button label="Oracle" click="showQuery(event)" />
								 <mx:Button label="Lucene" click="showQuery(event)" />
							 </mx:HBox>

							<mx:HBox borderStyle="solid" paddingTop="10" paddingBottom="10" 
								 paddingLeft="10" paddingRight="10">
								<mx:Label text=" Add Concepts: " />
								<mx:ComboBox id="conceptQuerySelector" dataProvider="{allConcepts}" width="150" change="queryString.text += '{' + conceptQuerySelector.selectedLabel + '} '"/>
							</mx:HBox>

							<mx:HBox borderStyle="solid" paddingTop="10" paddingBottom="10" 
								 paddingLeft="10" paddingRight="10">
								<mx:LinkButton id="QueryNOW" label="SEARCH" click="queryLucid.send();queryOracle.send();queryLucene.send();currentState='queryResults'"/>
							</mx:HBox>

						</mx:HBox>

						<mx:HBox width="100%" height="100%">
						<mx:TextArea width="100%" height="100%" id="queryString">
						    <mx:text>
						    </mx:text>
						</mx:TextArea>
					</mx:HBox>

					</mx:VBox>
				</mx:target>
			</mx:AddChild>
			<mx:SetProperty target="{loginPanel}" name="title" value="Your Query"/>
		</mx:State>

		<!-- Edit Concept State -->
		<mx:State name="editConcept">
			<mx:AddChild relativeTo="{loginPanel}" position="firstChild">
				<mx:target>
					<mx:Form id="editConceptForm" width="100%">
							<mx:Label text="{conceptsArray.toString()}" id="editThisConceptName" left="10" top="10"/>
						        <mx:ComboBox id="editThisConcept" dataProvider="{allConcepts}" width="150" change="preAuthorize();getConceptData.send()"/>
							<mx:TextArea id="editThisConceptField" width="400" height="300"
							text="{editThisConcept.selectedItem.data}">
							</mx:TextArea>
							<mx:Button label="Update" click="updateConceptData.send();Alert.show('Updated');getAllConcepts.send();currentState='showQuery';"/>

					</mx:Form>
				</mx:target>
			</mx:AddChild>
			<mx:AddChild relativeTo="{loginPanel}" position="firstChild">
				<mx:target>
					<mx:Form id="editingConceptForm" width="100%">
												</mx:Form>
				</mx:target>
			</mx:AddChild>
			<mx:SetProperty target="{loginPanel}" name="title" value="Editing Concept"/>
		</mx:State>

		<!-- Editing Concept State -->
		<mx:State name="editingConcept">
			<mx:SetProperty target="{loginPanel}" name="title" value="Editing Unique Concept"/>
		</mx:State>

		<mx:State name="newConcept">

			<mx:AddChild relativeTo="{loginPanel}" position="firstChild">
				<mx:target>
					<mx:Form id="mainForm" width="100%">
					</mx:Form>
				</mx:target>
			</mx:AddChild>
			<!-- Now lets add the concept builder box - would be nice if we could modularize this... -->
			<mx:AddChild relativeTo="{mainForm}" position="lastChild">
				<mx:target>
					<mx:Canvas
					cornerRadius="10"
					borderStyle="solid"
					backgroundColor="#A9A9A9"
					width="100%"
					height="200"
					>
						<mx:TextArea width="100%" height="100%" id="newConceptString">
						    <mx:text>
						    </mx:text>
						</mx:TextArea>
					</mx:Canvas>
				</mx:target>
			</mx:AddChild>
			<mx:SetProperty target="{loginPanel}" name="title" value="New Concept"/>
			<mx:RemoveChild target="{registerLink}"/>
			<mx:AddChild relativeTo="{mainForm}" position="lastChild">
				<mx:target>
					<mx:HBox>
						<mx:Label text="Concept Name (only ALPHA-NUM please): " />
						<mx:TextInput id="newConceptName"/><mx:Button label="Add Concept!" click="addConcept.send();Alert.show('Added');getAllConcepts.send();currentState='showQuery'"/>
					</mx:HBox>
				</mx:target>
			</mx:AddChild>
		</mx:State>
	</mx:states>



	<!-- Transition Definitions -->
	<mx:transitions>

		<mx:Transition id="toShowHelp" fromState="*" toState="showHelp">
		    <mx:Sequence targets="{[loginPanel, registerLink, spacer1]}">
			<mx:RemoveChildAction/>
			<mx:SetPropertyAction target="{loginPanel}" name="title"/>
			<mx:Resize target="{loginPanel}" heightTo="700" widthTo="700"/>
			<mx:AddChildAction/>
		    </mx:Sequence>
		</mx:Transition>


		<!-- Define the transition from the base state to the Register state.-->
		<mx:Transition id="toNewConcept" fromState="*" toState="newConcept">
		    <mx:Sequence targets="{[loginPanel, registerLink, spacer1]}">
			<mx:RemoveChildAction/>
			<mx:SetPropertyAction target="{loginPanel}" name="title"/>
			<mx:Resize target="{loginPanel}" heightTo="500" widthTo="700"/>
			<mx:AddChildAction/>
		    </mx:Sequence>
		</mx:Transition>

		<!-- Define the transition for edit a concept.-->
		<mx:Transition id="toEditConcept" fromState="*" toState="editConcept">
		    <mx:Sequence targets="{[loginPanel, registerLink, spacer1]}">
			<mx:RemoveChildAction/>
			<mx:SetPropertyAction target="{loginPanel}" name="title"/>
			<mx:Resize target="{loginPanel}" heightTo="450" widthTo="500"/>
			<mx:AddChildAction/>
		    </mx:Sequence>
		</mx:Transition>

		<!-- Define the transition for edit a concept.-->
		<mx:Transition id="toQueryResults" fromState="*" toState="queryResults">
		    <mx:Sequence targets="{[loginPanel, registerLink, spacer1]}">
			<mx:RemoveChildAction/>
			<mx:SetPropertyAction target="{loginPanel}" name="title"/>
			<mx:Resize target="{loginPanel}" heightTo="700" widthTo="800"/>
			<mx:AddChildAction/>
		    </mx:Sequence>
		</mx:Transition>

		<!-- Define the transition for editing a concept.-->
		<mx:Transition id="toEditingConcept" fromState="*" toState="editingConcept">
		    <mx:Sequence targets="{[loginPanel, registerLink, spacer1]}">
			<mx:RemoveChildAction/>
			<mx:SetPropertyAction target="{loginPanel}" name="title"/>
			<mx:Resize target="{loginPanel}" heightTo="200" widthTo="300"/>
			<mx:AddChildAction/>
		    </mx:Sequence>
		</mx:Transition>

		<!-- Define the transition from the adding concept state to the concept added state.-->
		<mx:Transition id="toConceptAdded" fromState="*" toState="conceptAdded">
		    <mx:Sequence targets="{[loginPanel, registerLink, spacer1]}">
			<mx:RemoveChildAction/>
			<mx:SetPropertyAction target="{loginPanel}" name="title"/>
			<mx:Resize target="{loginPanel}" heightTo="100" widthTo="200"/>
			<mx:AddChildAction/>
		    </mx:Sequence>
		</mx:Transition>

		<!-- Define the transition for showQuery -->
		<mx:Transition id="toShowQuery" fromState="*" toState="showQuery">
		    <mx:Sequence targets="{[loginPanel, registerLink, spacer1]}">
			<mx:RemoveChildAction/>
			<mx:SetPropertyAction target="{loginPanel}" name="title"/>
			<mx:Resize target="{loginPanel}" heightTo="400" widthTo="800"/>
			<mx:AddChildAction/>
		    </mx:Sequence>
		</mx:Transition>

		<!-- Define the transition from the Register state to the base state.-->
		<mx:Transition id="toDefault" fromState="newConcept" toState="*">
		    <mx:Sequence targets="{[loginPanel, registerLink, spacer1]}">
			<mx:RemoveChildAction/>
			<mx:SetPropertyAction target="{loginPanel}" name="title"/>
			<mx:Resize target="{loginPanel}"/>
			<mx:AddChildAction/>
		    </mx:Sequence>
		</mx:Transition>
	</mx:transitions>



	<!-- header area -->





		<mx:VBox>



	<mx:Canvas
	cornerRadius="10"
	borderStyle="solid"
	backgroundColor="#A9A9A9"
	width="100%"
	height="90"
	>



		<mx:HBox height="80" width="100%">
			<mx:Spacer width="75%"/>


<!-- Header Menu -->
            <mx:Image id="phoneImage" source="@Embed('IRLabsLogoTrans.gif')" />
        <mx:MenuBar labelField="@label"  
            dataProvider="{menuBarCollection}"
            change="changeHandler(event);" 
            itemClick="itemClickHandler(event);" 
            itemRollOver="rollOverHandler(event);"/>        

			<mx:Spacer width="75%"/>
		</mx:HBox>
	</mx:Canvas>



    <!-- Define a Panel container that defines the login form.-->
    <mx:Panel title="" id="loginPanel" 
        horizontalScrollPolicy="off" verticalScrollPolicy="off" width="100%" height="40"
	layout="horizontal"
        paddingTop="10" paddingLeft="10" paddingRight="10" paddingBottom="10">

	<mx:VBox id="col1">
		<mx:ControlBar>
		    <mx:LinkButton id="registerLink"  label="" click="currentState='newConcept'"/>
		    <mx:Spacer height="0" width="1" id="spacer1"/>
		</mx:ControlBar>
	</mx:VBox>

	<mx:VBox id="col2">
						<mx:Label text="Debug Output:" width="0" height="0" />
						<mx:TextArea id="debugArea" width="0" height="0" />
	</mx:VBox>
    </mx:Panel>

	</mx:VBox>

	<mx:VBox >

	<mx:Spacer height="1"/>

    	<mx:Spacer height="2"/>


	</mx:VBox>

<mx:XML id="treeData" xmlns="">

<!-- isFolder is technically DEPRECATED. We should change all isFolder's
to isBranch and same in the PHP code -->

<root>
    <node label="ALL"  isFolder="true">
	    <node label="NONOTME"/>
    </node>
    <node label="NOT"  isFolder="true" isBranch="true">
	    <node label="NONOTME"/>
    </node>
</root>

</mx:XML>    


</mx:Application>
