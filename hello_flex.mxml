<?xml version="1.0" encoding="utf-8"?>
<mx:Application xmlns:mx="http://www.adobe.com/2006/mxml" 
	layout="horizontal"
	backgroundColor="black"
	creationComplete="initApp();initCollections();"
	>

	<mx:Script>
		<![CDATA[


		//-----------------------------
		//    Menu Code
		//----------------------------

		import mx.events.MenuEvent;
		    import mx.controls.Alert;
		    import mx.collections.*;

		    [Bindable]
		    public var menuBarCollection:XMLListCollection;
	    
		    private var menubarXML:XMLList =<>
			<menuitem label="Engines">
			    <menuitem label="SQLGen" data="1A"/>
			    <menuitem label="Lucene" data="1B"/>
			</menuitem>
			<menuitem label="Concepts">
			    <menuitem label="New" data="2A"/>
			    <menuitem label="Edit" data="2B"/>
			    <menuitem label="Delete" data="2C"/>
			    <menuitem label="Import" data="2D"/>
			    <menuitem label="Save" data="2E"/>
			</menuitem>
			<menuitem label="Something" data="M3"/>
			</>
			
		    // Event handler to initialize the MenuBar control.
		    private function initCollections():void {
			menuBarCollection = new XMLListCollection(menubarXML);
		    }
		    
		    // Event handler for the MenuBar control's change event.
		    private function changeHandler(event:MenuEvent):void  {
			// Only open the Alert for a selection in a pop-up submenu.
			// The MenuEvent.menu property is null for a change event 
			// dispatched by the menu bar.
			if (event.menu != null) {
			    Alert.show("Label: " + event.item.@label + "\n" + 
				"Data: " + event.item.@data, "Clicked menu item");
			}                    
		    }

		    // Event handler for the MenuBar control's itemRollOver event.
		    private function rollOverHandler(event:MenuEvent):void {
			//rollOverTextArea.text = "type: " + event.type + "\n";
			//rollOverTextArea.text += "target menuBarIndex: " + event.index + "\n";
		    }           

		    // Event handler for the MenuBar control's itemClick event.
		    private function itemClickHandler(event:MenuEvent):void {
			//itemClickTextArea.text = "type: " + event.type + "\n";
			//itemClickTextArea.text += "target menuBarIndex: " + event.index + "\n";
		    }           


		//----------------------------
		//	END MENU CODE
		//----------------------------




		//----------------
		// Double Click
		//----------------

            import mx.rpc.events.ResultEvent;


		    private function appendText(e:Event):void {
			//var now:String = "lawlcatz";
			var now:Object = e.currentTarget.value;
			//var now:Object = e.currentTarget.selectedIndex;
			secondList.dataProvider.addItem(now);
		    }
		//---------------
		// End Double Click
		//---------------


		import mx.collections.ArrayCollection;

		[Bindable]
		private var queryFeed:String;

		[Bindable]
		private var antonymsList:ArrayCollection;

		private function lawl():void
		{
			queryFeed = "lawl";
			secondList.dataProvider.addItem(term.text);
		}

		//------------------------
		// Start Drag and Drop
		//------------------------

            import mx.managers.DragManager;
            import mx.events.DragEvent;
            import mx.collections.ArrayCollection;
    

            private function initApp():void {
                firstList.dataProvider = new ArrayCollection([
                    {label:"(", data:"("},
                    {label:")", data:")"},
                    {label:String.fromCharCode(0x222A), data:String.fromCharCode(0x222A)},
                    {label:String.fromCharCode(0x2229), data:String.fromCharCode(0x2229)}
                ]);

                secondList.dataProvider = new ArrayCollection([]);

                synonymsList.dataProvider = new ArrayCollection([
			{label:"lawl", data:"lawl"},
			{label:"catz", data:"catz"},
			{label:"wham", data:"wham"}
			]);

                antonymsList = new ArrayCollection([
			{label:"unl337", data:"unl337"},
			{label:"blanko el gato", data:"blanko el gato"},
			{label:"50 cent", data:"50 cent"}
			]);
            }

            // Variable to store original border color.
            private var tempBorderColor:uint;
            
            // Flag to indicate that tempBorderColor has been set.
            private var borderColorSet:Boolean = false;

            private function dragOverHandler(event:DragEvent):void {
            
                // Explpicitly handle the dragOver event.            
                event.preventDefault();
                
                // Since you are explicitly handling the dragOver event,
                // call showDropFeedback(event) to have the drop target
                // display the drop indicator.
                // The drop indicator is removed
                // automatically for the list controls by the built-in 
                // event handler for the dragDrop event.
                event.currentTarget.showDropFeedback(event);
            
                if (event.dragSource.hasFormat("items"))
                {
                    // Set the border to green to indicate that 
                    // this is a drop target.
                    // Since the dragOver event is dispatched continuosly 
                    // as you move over the drop target, only set it once.
                    if (borderColorSet == false) {                 
                        tempBorderColor = 
                            event.currentTarget.getStyle('borderColor');
                        borderColorSet = true;
                    }
                
                    // Set the drag-feedback indicator based on the 
                    // type of drag-and-drop operation.
                    event.currentTarget.setStyle('borderColor', 'green');
                    if (event.ctrlKey) {                    
                        DragManager.showFeedback(DragManager.COPY);
                        return;
                    }
                    else if (event.shiftKey) {
                        DragManager.showFeedback(DragManager.LINK);
                        return;
                    }
                    else {
                        DragManager.showFeedback(DragManager.MOVE);
                        return;
                    }
                }

                // Drag not allowed.
                DragManager.showFeedback(DragManager.NONE);                
            }
            
            private function dragDropHandler(event:DragEvent):void {
                dragExitHandler(event);
            }            

            // Restore the border color.
            private function dragExitHandler(event:DragEvent):void {
              event.currentTarget.setStyle('borderColor', tempBorderColor);
              borderColorSet = true;
            }

		//------------------------
		// Stop Drag and Drop
		//------------------------


		]]>
	</mx:Script>

    <mx:Glow id="glowImage" duration="1000" 
        alphaFrom="1.0" alphaTo="0.3" 
        blurXFrom="0.0" blurXTo="50.0" 
        blurYFrom="0.0" blurYTo="50.0" 
        color="0x00FF00"/>
    <mx:Glow id="unglowImage" duration="1000" 
        alphaFrom="0.3" alphaTo="1.0" 
        blurXFrom="50.0" blurXTo="0.0" 
        blurYFrom="50.0" blurYTo="0.0" 
        color="0x0000FF"/>


<!-- May contain some helpful code about wrapping our test arround the box.  http://livedocs.adobe.com/flex/3/html/help.html?content=behaviors_09.html -->


	<!-- header area -->





		<mx:VBox>



	<mx:Canvas
	cornerRadius="10"
	borderStyle="solid"
	backgroundColor="#A9A9A9"
	width="550"
	height="30"
	>



		<mx:HBox height="80">
			<mx:Spacer width="20"/>


<!-- Header Menu -->
        <mx:MenuBar labelField="@label"  
            dataProvider="{menuBarCollection}"
            change="changeHandler(event);" 
            itemClick="itemClickHandler(event);" 
            itemRollOver="rollOverHandler(event);"/>        

<!--
			<mx:Button label="("/>
			<mx:Button label=")"/>
			<mx:Button label="U"/>
			<mx:Button label="N"/>

			<mx:Spacer width="20"/>

-->
			<mx:TextInput id="term"/>
			<mx:Button label="Add" click="lawl()"/>

		</mx:HBox>
	</mx:Canvas>


	<mx:Canvas
	cornerRadius="10"
	borderStyle="solid"
	backgroundColor="#A9A9A9"
	width="550"
	height="400"
	>

			<mx:HorizontalList id="secondList" 
liveScrolling="false" showScrollTips="true"
			columnWidth="50"
			paddingLeft="10"
			width="530"
			height="350"
			borderStyle="dotted"
			backgroundColor="#A9A9A9"
			borderThickness="2"
			dragEnabled="true"
			dragMoveEnabled="true"
			dropEnabled="true"
			dragOver="dragOverHandler(event);"
			dragDrop="dragExitHandler(event);"
			dragExit="dragExitHandler(event);"
			mouseDownEffect="{glowImage};"
			mouseUpEffect="{unglowImage};"
			/>

	</mx:Canvas>

	<!-- Drag and Drop code -->
	<!-- http://livedocs.adobe.com/flex/3/html/help.html?content=dragdrop_7.html -->
	    <mx:HBox id="myHB">


	      <mx:HorizontalList id="firstList" 
			borderStyle="dotted"
			backgroundColor="#A9A9A9"
		    borderThickness="2"
		    dragEnabled="true"
		    dropEnabled="false"
			dragMoveEnabled="false"
			width="500"
			height="50"
			columnWidth="100"
			columnCount="3"
		    dragOver="dragOverHandler(event);"
		    dragDrop="dragExitHandler(event);"
		    dragExit="dragExitHandler(event);"
			doubleClickEnabled="true"
                        doubleClick="appendText(event);"
		/>
	    </mx:HBox>
	    
	    <mx:Button id="b1" 
		label="Reset"
		click="initApp()"
	    />
	<!-- End Drag and Drop -->

	</mx:VBox>

	<mx:VBox >

	<mx:Spacer height="1"/>

        <mx:HBox>
            <mx:Button label="Synonyms" click="accordion.selectedIndex=0;"/>
            <mx:Button label="Antonyms" click="accordion.selectedIndex=1;"/>
        </mx:HBox>

	<mx:Spacer height="2"/>

	<mx:Canvas
	borderStyle="solid"
	width="200"
	height="390"
	>

		<mx:Accordion id="accordion" width="100%" height="100%">
		    <!-- Define each panel using a VBox container. -->
		    <mx:VBox label="Synonyms" width="100%" id="VB1">
			<mx:List id="synonymsList" width="100%"
			borderStyle="dotted"
		    borderThickness="2"
		    dragEnabled="true"
		    dropEnabled="false"
			dragMoveEnabled="true"
		    dragOver="dragOverHandler(event);"
		    dragDrop="dragExitHandler(event);"
		    dragExit="dragExitHandler(event);"
			doubleClickEnabled="true"
                        doubleClick="appendText(event);"
			>
			</mx:List>
		    </mx:VBox>

		    <mx:VBox label="Antonyms" width="100%" id="lawl2">
			<mx:List width="100%"
			dataProvider="{antonymsList}"
			borderStyle="dotted"
		    borderThickness="2"
		    dragEnabled="true"
		    dropEnabled="false"
			dragMoveEnabled="true"
		    dragOver="dragOverHandler(event);"
		    dragDrop="dragExitHandler(event);"
		    dragExit="dragExitHandler(event);"
			doubleClickEnabled="true"
                        doubleClick="appendText(event);"
			>
			</mx:List>
		    </mx:VBox>



		</mx:Accordion>

	</mx:Canvas>
	</mx:VBox>

</mx:Application>
