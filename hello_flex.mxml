<?xml version="1.0" encoding="utf-8"?>
<mx:Application xmlns:mx="http://www.adobe.com/2006/mxml" 
	layout="horizontal"
	backgroundColor="black"
	creationComplete="initApp();initCollections();"
	>

	<mx:Script>
		<![CDATA[


		//-----------------------------
		//    Menu Code
		//----------------------------

		import mx.events.MenuEvent;
		    import mx.controls.Alert;
		    import mx.collections.*;

		    [Bindable]
		    public var menuBarCollection:XMLListCollection;
	    
		    private var menubarXML:XMLList =<>
			<menuitem label="Engines">
			    <menuitem label="SQLGen" data="1A"/>
			    <menuitem label="Lucene" data="1B"/>
			</menuitem>
			<menuitem label="Concepts">
			    <menuitem label="New" data="2A"/>
			    <menuitem label="Edit" data="2B"/>
			    <menuitem label="Delete" data="2C"/>
			    <menuitem label="Import" data="2D"/>
			    <menuitem label="Save" data="2E"/>
			</menuitem>
			<menuitem label="Query">
			    <menuitem label="Show Query" data="3A"/>
			</menuitem>
			</>
			
		    // Event handler to initialize the MenuBar control.
		    private function initCollections():void {
			menuBarCollection = new XMLListCollection(menubarXML);
		    }
		    
		    // Event handler for the MenuBar control's change event.
		    private function changeHandler(event:MenuEvent):void  {
			// Only open the Alert for a selection in a pop-up submenu.
			// The MenuEvent.menu property is null for a change event 
			// dispatched by the menu bar.
			if (event.menu != null) {
				var theGoods:String;
				theGoods = event.item.@data;
				switch (theGoods)
				{
					case "1A":	Alert.show("Now using SQLGen Engine");
							break;
					case "2A":	currentState='newConcept';
							break;
					case "2B":	currentState='editConcept';
							break;
					case "3A":	currentState='showQuery';
							break;
				}
			}                    
		    }

		    // Event handler for the MenuBar control's itemRollOver event.
		    private function rollOverHandler(event:MenuEvent):void {
			//rollOverTextArea.text = "type: " + event.type + "\n";
			//rollOverTextArea.text += "target menuBarIndex: " + event.index + "\n";
		    }           

		    // Event handler for the MenuBar control's itemClick event.
		    private function itemClickHandler(event:MenuEvent):void {
			//itemClickTextArea.text = "type: " + event.type + "\n";
			//itemClickTextArea.text += "target menuBarIndex: " + event.index + "\n";
		    }           


		//----------------------------
		//	END MENU CODE
		//----------------------------




		//----------------
		// Double Click
		//----------------

            import mx.rpc.events.ResultEvent;


		    private function appendText(e:Event):void {
			//var now:String = "lawlcatz";
			var now:Object = e.currentTarget.value;
			//var now:Object = e.currentTarget.selectedIndex;
			//secondList.dataProvider.addItem(now);
		    }
		//---------------
		// End Double Click
		//---------------


		//----------------
		// PHP Shit
		//----------------

		//-----------------
		// End PHP Shit
		//-----------------

		import mx.collections.ArrayCollection;

		[Bindable]
		private var antonymsList:ArrayCollection;

		private function lawl():void
		{
			//query.dataProvider.addItem(term.text);
			//secondList.dataProvider.addItem(term.text);
		}

		//------------------------
		// Start Drag and Drop
		//------------------------

            import mx.managers.DragManager;
            import mx.events.DragEvent;
            import mx.collections.ArrayCollection;
    
		[Bindable]
		public var conceptsArray:ArrayCollection = new ArrayCollection([]);

            private function initApp():void {
             //   firstList.dataProvider = new ArrayCollection([
             //       {label:"(", data:"("},
             //       {label:")", data:")"},
             //       {label:String.fromCharCode(0x222A), data:String.fromCharCode(0x222A)},
             //       {label:String.fromCharCode(0x2229), data:String.fromCharCode(0x2229)}
             //   ]);

                //secondList.dataProvider = new ArrayCollection([]);

		//query.dataProvider = new ArrayCollection([]);

                synonymsList.dataProvider = new ArrayCollection([
			{label:"lawl", data:"lawl"},
			{label:"catz", data:"catz"},
			{label:"wham", data:"wham"}
			]);

                antonymsList = new ArrayCollection([
			{label:"unl337", data:"unl337"},
			{label:"blanko el gato", data:"blanko el gato"},
			{label:"50 cent", data:"50 cent"}
			]);
            }

		[Bindable]
		public var queryArray:ArrayCollection;
		//public var queryArray:Array;

		public function getQuery():void {
			;
		}

		private function setQuery():void {
			//query.dataProvider.addItem(secondList);
			currentState = 'showQuery';
			//queryArray.addItem(secondList);
		}

            // Variable to store original border color.
            private var tempBorderColor:uint;
            
            // Flag to indicate that tempBorderColor has been set.
            private var borderColorSet:Boolean = false;

            private function dragOverHandler(event:DragEvent):void {
            
                // Explpicitly handle the dragOver event.            
                event.preventDefault();
                
                // Since you are explicitly handling the dragOver event,
                // call showDropFeedback(event) to have the drop target
                // display the drop indicator.
                // The drop indicator is removed
                // automatically for the list controls by the built-in 
                // event handler for the dragDrop event.
                event.currentTarget.showDropFeedback(event);
            
                if (event.dragSource.hasFormat("items"))
                {
                    // Set the border to green to indicate that 
                    // this is a drop target.
                    // Since the dragOver event is dispatched continuosly 
                    // as you move over the drop target, only set it once.
                    if (borderColorSet == false) {                 
                        tempBorderColor = 
                            event.currentTarget.getStyle('borderColor');
                        borderColorSet = true;
                    }
                
                    // Set the drag-feedback indicator based on the 
                    // type of drag-and-drop operation.
                    event.currentTarget.setStyle('borderColor', 'green');
                    if (event.ctrlKey) {                    
                        DragManager.showFeedback(DragManager.COPY);
                        return;
                    }
                    else if (event.shiftKey) {
                        DragManager.showFeedback(DragManager.LINK);
                        return;
                    }
                    else {
                        DragManager.showFeedback(DragManager.MOVE);
                        return;
                    }
                }

                // Drag not allowed.
                DragManager.showFeedback(DragManager.NONE);                
            }
            
            private function dragDropHandler(event:DragEvent):void {
                dragExitHandler(event);
            }            

            // Restore the border color.
            private function dragExitHandler(event:DragEvent):void {
              event.currentTarget.setStyle('borderColor', tempBorderColor);
              borderColorSet = true;
            }

		//------------------------
		// Stop Drag and Drop
		//------------------------



		//------------------------
		// Start Tree Code
		//------------------------
	    import mx.events.DragEvent;
            import mx.managers.DragManager;
            import mx.core.DragSource;
            import mx.core.UIComponent;
            import mx.controls.Tree;
            /**
             * Called as soon as the dragProxy enters the target. You can add logic
             * to determine if the target will accept the drop based on the
             * dragInitiator, the data available in the dragSource.
             * Here the drop is blindly accepted.
             */

            private function onDragEnter( event:DragEvent ) : void

            {
                DragManager.acceptDragDrop(UIComponent(event.currentTarget));
            }
            /**
             * Called while the dragProxy is over the drop target. You can
             * use this function to determine the type of feedback to show.
             * Since the List is set to allow MOVE (the item is deleted
             * once dropped), different feedback possibilities are given.
             *
             * Also, for this application, the Tree control node the dragProxy is
             * over is selected. As the dragProxy moves, the Tree control's
             * selection changes.
             *
             * For a bit more complication, the drop is being allowed
             * only over nodes whose type is NOT 'state'.
             * The feedback is removed.
             */
            private function onDragOver( event:DragEvent ) : void

            {
                var dropTarget:Tree = Tree(event.currentTarget);
                var r:int = dropTarget.calculateDropIndex(event);
                tree.selectedIndex = r;
                var node:XML = tree.selectedItem as XML;
                if( node.@type == "state" ) {

                    DragManager.showFeedback(DragManager.NONE);
                    return;
                }
                if (event.ctrlKey)

                    DragManager.showFeedback(DragManager.COPY);
                else if (event.shiftKey)
                    DragManager.showFeedback(DragManager.LINK);
                else {

                    DragManager.showFeedback(DragManager.MOVE);
                }
            }
            /**
             * Called when the dragProxy is released
             * over the drop target. The information in the dragSource
             * is extracted and processed.
             *
             * The target node is determined and 
            * all of the data selected (the List has allowMultipleSection
            * set) is added.
             */
            private function onDragDrop( event:DragEvent ) : void

            {
                var ds:DragSource = event.dragSource;
                var dropTarget:Tree = Tree(event.currentTarget);
                var items:Array = ds.dataForFormat("items") as Array;
                var r:int = tree.calculateDropIndex(event);
                tree.selectedIndex = r;
                var node:XML = tree.selectedItem as XML;
                var p:*;
                // if the selected node has children (it is type==city),

                // then add the items at the beginning
                if( tree.dataDescriptor.hasChildren(node) ) {
                    p = node;
                    r = 0;
                } else {

                    p = node.parent();
                }
                for(var i:Number=0; i < items.length; i++) {

                    var insert:XML = <node />;
                    insert.@label = items[i];
                    insert.@type  = "restaurant";
                    tree.dataDescriptor.addChildAt(p, insert, r+i);
                }

            }
            /**
             * Called when the drag operation completes, whether 
             * successfully or not. The tree is cleared of its
             * selection.
             */
            private function onDragComplete( event:DragEvent ) : void

            {
                tree.selectedIndex = -1;
            }        


	    import mx.collections.XMLListCollection;
            
            [Bindable]
            private var company:XML =
              <list>
                <department title="Finance" code="200">
                    <employee name="John H"/>
                    <employee name="Sam K"/>
                </department>
                <department title="Operations" code="400">
                    <employee name="Bill C"/>
                    <employee name="Jill W"/>
                </department>                    
                <department title="Engineering" code="300">
                    <employee name="Erin M"/>
                    <employee name="Ann B"/>
                </department>                                
              </list>;

            [Bindable]

            private var companyData:XMLListCollection = new XMLListCollection(company.department);
            
            private function treeLabel(item:Object):String
            {

                var node:XML = XML(item);
                if( node.localName() == "department" )

                    return node.@title;
                else
                    return node.@name;
            }

            private function addEmployee():void
            {
		var term:XML = 
			<list>
				<concept title="empName.text"/>
			</list>;
            	var termData:XMLListCollection = new XMLListCollection(term.concept);

		conceptsArray.addItem(termData);
		//query.dataProvider.addItem(empName.text);
                var newNode:XML = <employee/>;
                newNode.@name = empName.text;
                var dept:XMLList =company.department.(@title == "Operations");
                if( dept.length() > 0 ) {

                    dept[0].appendChild(newNode);
                    empName.text = "";
                }
            }

		//---------------------
		// End Tree Code
		//---------------------

		import mx.rpc.events.ResultEvent;
		import mx.rpc.events.FaultEvent;

	   [Bindable]
	   private var shippingInfo:XMLList;

	        public function handleXML(event:ResultEvent):void
            {
                shippingInfo = event.result.option as XMLList;
            }

	        public function handleFault(event:FaultEvent):void
	        {
	           Alert.show(event.fault.faultString, "Error");
	        }
		]]>
	</mx:Script>

   <mx:HTTPService result="handleXML(event);" fault="handleFault(event);" id="addConcept" resultFormat="e4x"
    	url="http://localhost:8888/ir/search/ir-search.php?function=addConcept" useProxy="false">
	    <mx:request xmlns="">
	        <zipcode>60707</zipcode>
	        <pounds>10</pounds>
	    </mx:request>
	</mx:HTTPService>


    <mx:Glow id="glowImage" duration="1000" 
        alphaFrom="1.0" alphaTo="0.3" 
        blurXFrom="0.0" blurXTo="50.0" 
        blurYFrom="0.0" blurYTo="50.0" 
        color="0x00FF00"/>
    <mx:Glow id="unglowImage" duration="1000" 
        alphaFrom="0.3" alphaTo="1.0" 
        blurXFrom="50.0" blurXTo="0.0" 
        blurYFrom="50.0" blurYTo="0.0" 
        color="0x0000FF"/>


<!-- May contain some helpful code about wrapping our test arround the box.  http://livedocs.adobe.com/flex/3/html/help.html?content=behaviors_09.html -->




	<!-- Define one view state, in addition to the base state.-->
	<mx:states>
		<mx:State name="conceptAdded">
			<mx:AddChild relativeTo="{loginPanel}" position="firstChild">
				<mx:target>
					<mx:LinkButton id="viewQuery" label="View Query" click="currentState='showQuery'"/>
				</mx:target>
			</mx:AddChild>
			<mx:SetProperty target="{loginPanel}" name="title" value="Concept Added!"/>
		</mx:State>

		<mx:State name="showQuery">
			<mx:AddChild relativeTo="{loginPanel}" position="lastChild">
				<mx:target>
					<mx:Canvas
					cornerRadius="10"
					borderStyle="solid"
					backgroundColor="#A9A9A9"
					width="100%"
					height="100%"
					>
						<mx:Label text="Query" left="10" top="10"/>
						<mx:Tree height="100%" width="186" left="10" top="30" bottom="10" id="tree"
						    labelField="@label"
						    dataProvider="{treeData.node}"
						    dropEnabled="false"
						    dragMoveEnabled="false"
						    dragEnter="onDragEnter(event)"
						    dragOver="onDragOver(event)"
						    dragDrop="onDragDrop(event)">
						</mx:Tree>    
						<mx:Label text="Concepts" right="5" top="10"/>
						<mx:List width="188" height="206" right="10" top="30" id="concepts"
							dataProvider="{conceptsArray}"
						    allowMultipleSelection="true"
						    dragEnabled="true"
						    dragMoveEnabled="true"
						    dragComplete="onDragComplete(event)">
						</mx:List>        
					</mx:Canvas>
				</mx:target>
			</mx:AddChild>
			<mx:SetProperty target="{loginPanel}" name="title" value="Your Query"/>
		</mx:State>

		<!-- Edit Concept State -->
		<mx:State name="editConcept">
			<mx:AddChild relativeTo="{loginPanel}" position="firstChild">
				<mx:target>
					<mx:Form id="editConceptForm" width="100%">
							<mx:TextArea text="{conceptsArray.toString()}"/>
						        <mx:ComboBox id="editThisConcept" dataProvider="{conceptsArray}" width="150"/>
							<mx:Button label="Edit Concept" click="currentState='editingConcept'"/>
					</mx:Form>
				</mx:target>
			</mx:AddChild>
			<mx:AddChild relativeTo="{loginPanel}" position="firstChild">
				<mx:target>
					<mx:Form id="editingConceptForm" width="100%">
							<mx:TextArea width="100%"
							text="{editThisConcept.selectedItem.data}">
							</mx:TextArea>
							<mx:Button label="Update" click="currentState='editingConcept'"/>
					</mx:Form>
				</mx:target>
			</mx:AddChild>
			<mx:SetProperty target="{loginPanel}" name="title" value="Editing Concept"/>
		</mx:State>

		<!-- Edit Concept State -->
		<mx:State name="editingConcept">
			<mx:SetProperty target="{loginPanel}" name="title" value="Editing Unique Concept"/>
		</mx:State>

		<mx:State name="newConcept">

			<mx:AddChild relativeTo="{loginPanel}" position="firstChild">
				<mx:target>
					<mx:Form id="mainForm" width="100%">
					</mx:Form>
				</mx:target>
			</mx:AddChild>
			<!-- Now lets add the concept builder box - would be nice if we could modularize this... -->
			<mx:AddChild relativeTo="{mainForm}" position="lastChild">
				<mx:target>
					<mx:Canvas
					cornerRadius="10"
					borderStyle="solid"
					backgroundColor="#A9A9A9"
					width="100%"
					height="200"
					>
						<mx:TextArea width="100%" height="100%" id="secondList">
						    <mx:text>
						    </mx:text>
						</mx:TextArea>
					</mx:Canvas>
				</mx:target>
			</mx:AddChild>
			<mx:AddChild relativeTo="{col2}" position="firstChild">
				<mx:target>
					<mx:HBox>
						<mx:Button label="Synonyms" click="accordion.selectedIndex=0;"/>
						<mx:Button label="Antonyms" click="accordion.selectedIndex=1;"/>
					</mx:HBox>
				</mx:target>
			</mx:AddChild>
			<mx:AddChild relativeTo="{col2}" position="lastChild">
				<mx:target>
					<mx:Accordion id="accordion" width="10%" height="100%">
					<!-- Define each panel using a VBox container. -->
						<mx:VBox label="Synonyms" width="100%" id="VB1">
							<mx:List id="synonymsList" width="100%"
							borderStyle="dotted"
							borderThickness="2"
							dragEnabled="true"
							dropEnabled="false"
							dragMoveEnabled="true"
							dragOver="dragOverHandler(event);"
							dragDrop="dragExitHandler(event);"
							dragExit="dragExitHandler(event);"
							doubleClickEnabled="true"
							doubleClick="appendText(event);"
							>
							</mx:List>
						</mx:VBox>
						<mx:VBox label="Antonyms" width="100%" id="lawl2">
							<mx:List width="100%"
							dataProvider="{antonymsList}"
							borderStyle="dotted"
							borderThickness="2"
							dragEnabled="true"
							dropEnabled="false"
							dragMoveEnabled="true"
							dragOver="dragOverHandler(event);"
							dragDrop="dragExitHandler(event);"
							dragExit="dragExitHandler(event);"
							doubleClickEnabled="true"
							doubleClick="appendText(event);"
							>
							</mx:List>
						</mx:VBox>
					</mx:Accordion>
				</mx:target>
			</mx:AddChild>
			<mx:SetProperty target="{loginPanel}" name="title" value="New Concept"/>
			<mx:RemoveChild target="{registerLink}"/>
			<mx:AddChild relativeTo="{mainForm}" position="lastChild">
				<mx:target>
					<!--<mx:LinkButton id="loginButton" label="Add Concept" click="currentState='conceptAdded'"/>-->
					<!--<mx:LinkButton id="loginButton" label="Add Concept" click="setQuery()"/>-->
					<mx:HBox>
						<mx:TextInput id="empName"/><mx:Button label="Add Concept!" click="addConcept.send();"/>
							<mx:TextArea text="{shippingInfo}"/>
	<mx:DataGrid
		dataProvider="{shippingInfo}"
		x="80" y="141" width="262" height="92" id="shippingOptionsList" editable="false" enabled="true">
	    <mx:columns>
	        <mx:DataGridColumn headerText="Service" dataField="price" />
	    </mx:columns>
	</mx:DataGrid>
					</mx:HBox>
				</mx:target>
			</mx:AddChild>
		</mx:State>
	</mx:states>

	<mx:transitions>
		<!-- Define the transition from the base state to the Register state.-->
		<mx:Transition id="toNewConcept" fromState="*" toState="newConcept">
		    <mx:Sequence targets="{[loginPanel, registerLink, spacer1]}">
			<mx:RemoveChildAction/>
			<mx:SetPropertyAction target="{loginPanel}" name="title"/>
			<mx:Resize target="{loginPanel}" heightTo="500" widthTo="700"/>
			<mx:AddChildAction/>
		    </mx:Sequence>
		</mx:Transition>

		<!-- Define the transition for edit a concept.-->
		<mx:Transition id="toEditConcept" fromState="*" toState="editConcept">
		    <mx:Sequence targets="{[loginPanel, registerLink, spacer1]}">
			<mx:RemoveChildAction/>
			<mx:SetPropertyAction target="{loginPanel}" name="title"/>
			<mx:Resize target="{loginPanel}" heightTo="200" widthTo="500"/>
			<mx:AddChildAction/>
		    </mx:Sequence>
		</mx:Transition>

		<!-- Define the transition for editing a concept.-->
		<mx:Transition id="toEditingConcept" fromState="*" toState="editingConcept">
		    <mx:Sequence targets="{[loginPanel, registerLink, spacer1]}">
			<mx:RemoveChildAction/>
			<mx:SetPropertyAction target="{loginPanel}" name="title"/>
			<mx:Resize target="{loginPanel}" heightTo="200" widthTo="300"/>
			<mx:AddChildAction/>
		    </mx:Sequence>
		</mx:Transition>

		<!-- Define the transition from the adding concept state to the concept added state.-->
		<mx:Transition id="toConceptAdded" fromState="*" toState="conceptAdded">
		    <mx:Sequence targets="{[loginPanel, registerLink, spacer1]}">
			<mx:RemoveChildAction/>
			<mx:SetPropertyAction target="{loginPanel}" name="title"/>
			<mx:Resize target="{loginPanel}" heightTo="100" widthTo="200"/>
			<mx:AddChildAction/>
		    </mx:Sequence>
		</mx:Transition>

		<!-- Define the transition for showQuery -->
		<mx:Transition id="toShowQuery" fromState="*" toState="showQuery">
		    <mx:Sequence targets="{[loginPanel, registerLink, spacer1]}">
			<mx:RemoveChildAction/>
			<mx:SetPropertyAction target="{loginPanel}" name="title"/>
			<mx:Resize target="{loginPanel}" heightTo="400" widthTo="800"/>
			<mx:AddChildAction/>
		    </mx:Sequence>
		</mx:Transition>

		<!-- Define the transition from the Register state to the base state.-->
		<mx:Transition id="toDefault" fromState="newConcept" toState="*">
		    <mx:Sequence targets="{[loginPanel, registerLink, spacer1]}">
			<mx:RemoveChildAction/>
			<mx:SetPropertyAction target="{loginPanel}" name="title"/>
			<mx:Resize target="{loginPanel}"/>
			<mx:AddChildAction/>
		    </mx:Sequence>
		</mx:Transition>
	</mx:transitions>



	<!-- header area -->





		<mx:VBox>



	<mx:Canvas
	cornerRadius="10"
	borderStyle="solid"
	backgroundColor="#A9A9A9"
	width="100%"
	height="90"
	>



		<mx:HBox height="80" width="100%">
			<mx:Spacer width="75%"/>


<!-- Header Menu -->
            <mx:Image id="phoneImage" source="@Embed('IRLabsLogoTrans.gif')" />
        <mx:MenuBar labelField="@label"  
            dataProvider="{menuBarCollection}"
            change="changeHandler(event);" 
            itemClick="itemClickHandler(event);" 
            itemRollOver="rollOverHandler(event);"/>        

<!--
			<mx:Button label="("/>
			<mx:Button label=")"/>
			<mx:Button label="U"/>
			<mx:Button label="N"/>

			<mx:Spacer width="20"/>

			<mx:TextInput id="term"/>
			<mx:Button label="Add" click="lawl()"/>

-->
			<mx:Spacer width="75%"/>
		</mx:HBox>
	</mx:Canvas>



    <!-- Define a Panel container that defines the login form.-->
    <mx:Panel title="" id="loginPanel" 
        horizontalScrollPolicy="off" verticalScrollPolicy="off" width="100%" height="40"
	layout="horizontal"
        paddingTop="10" paddingLeft="10" paddingRight="10" paddingBottom="10">

	<mx:VBox id="col1">
		<mx:ControlBar>
		    <mx:LinkButton id="registerLink"  label="" click="currentState='newConcept'"/>
		    <mx:Spacer height="0" width="1" id="spacer1"/>
		</mx:ControlBar>
	</mx:VBox>

	<mx:VBox id="col2">
	</mx:VBox>
    </mx:Panel>

	</mx:VBox>

	<mx:VBox >

	<mx:Spacer height="1"/>

    	<mx:Spacer height="2"/>


	</mx:VBox>

<mx:XML id="treeData" xmlns="">

        <root>
            <node label="ALL" type="rootAll" data="rootAll">
                <node label="Cars" type="rootCars" >
                    <node label="Ford" type="car" />
                    <node label="GMC" type="car" />
                    <node label="Honda" type="car" />
	            <node label="NOT" type="rootCars" >
                        <node label="Saturn" type="car" />
		    </node>
                </node>
            </node>
            <node label="NOT" type="rootNot" data="rootNot">
                <node label="Boats" type="rootBoats" >
                    <node label="Speed Boats" type="speedBoats" />
                </node>
            </node>

        </root>
    </mx:XML>    

<!--
    <mx:Array id="listData">
        <mx:String>Johnny Rocket's</mx:String>

        <mx:String>Jet Pizza</mx:String>
        <mx:String>Steve's Greek</mx:String>
        <mx:String>Sonsie</mx:String>
        <mx:String>The Border Cafe</mx:String>

    </mx:Array>    
    <mx:Tree id="tree2" top="72" left="50" dataProvider="{companyData}"
        labelFunction="treeLabel"
         height="224" width="179"/>
        <mx:Button label="Add Operations Employee" click="addEmployee()"/><mx:TextInput id="empName"/>-->

</mx:Application>
