<?xml version="1.0" encoding="utf-8"?>
<mx:Application xmlns:mx="http://www.adobe.com/2006/mxml" 
	layout="horizontal"
	backgroundColor="black"
	creationComplete="initApp();"
	>

	<mx:Script>
		<![CDATA[

		//----------------
		// Double Click
		//----------------

            import mx.rpc.events.ResultEvent;


		    private function appendText():void {
			//var now:String = "lawlcatz";
			var now:Object = lawl3.text;
			secondList.dataProvider.addItem(now);
		    }
		//---------------
		// End Double Click
		//---------------


		import mx.collections.ArrayCollection;

		[Bindable]
		private var queryFeed:String;

		[Bindable]
		private var antonymsList:ArrayCollection;

		private function lawl():void
		{
			queryFeed = "lawl";
			secondList.dataProvider.addItem(term.text);
		}

		//------------------------
		// Start Drag and Drop
		//------------------------

            import mx.managers.DragManager;
            import mx.events.DragEvent;
            import mx.collections.ArrayCollection;
    

            private function initApp():void {
                firstList.dataProvider = new ArrayCollection([
                    {label:"(", data:"1"},
                    {label:")", data:"2"},
                    {label:"U", data:"3"},
                    {label:"N", data:"4"}
                ]);

                secondList.dataProvider = new ArrayCollection([]);

                synonymsList.dataProvider = new ArrayCollection([
			{label:"lawl", data:"1"},
			{label:"catz", data:"2"},
			{label:"wham", data:"3"}
			]);

                antonymsList = new ArrayCollection([
			{label:"unl337", data:"1"},
			{label:"blanko el gato", data:"2"},
			{label:"50 cent", data:"3"}
			]);
            }

            // Variable to store original border color.
            private var tempBorderColor:uint;
            
            // Flag to indicate that tempBorderColor has been set.
            private var borderColorSet:Boolean = false;

            private function dragOverHandler(event:DragEvent):void {
            
                // Explpicitly handle the dragOver event.            
                event.preventDefault();
                
                // Since you are explicitly handling the dragOver event,
                // call showDropFeedback(event) to have the drop target
                // display the drop indicator.
                // The drop indicator is removed
                // automatically for the list controls by the built-in 
                // event handler for the dragDrop event.
                event.currentTarget.showDropFeedback(event);
            
                if (event.dragSource.hasFormat("items"))
                {
                    // Set the border to green to indicate that 
                    // this is a drop target.
                    // Since the dragOver event is dispatched continuosly 
                    // as you move over the drop target, only set it once.
                    if (borderColorSet == false) {                 
                        tempBorderColor = 
                            event.currentTarget.getStyle('borderColor');
                        borderColorSet = true;
                    }
                
                    // Set the drag-feedback indicator based on the 
                    // type of drag-and-drop operation.
                    event.currentTarget.setStyle('borderColor', 'green');
                    if (event.ctrlKey) {                    
                        DragManager.showFeedback(DragManager.COPY);
                        return;
                    }
                    else if (event.shiftKey) {
                        DragManager.showFeedback(DragManager.LINK);
                        return;
                    }
                    else {
                        DragManager.showFeedback(DragManager.MOVE);
                        return;
                    }
                }

                // Drag not allowed.
                DragManager.showFeedback(DragManager.NONE);                
            }
            
            private function dragDropHandler(event:DragEvent):void {
                dragExitHandler(event);
            }            

            // Restore the border color.
            private function dragExitHandler(event:DragEvent):void {
              event.currentTarget.setStyle('borderColor', tempBorderColor);
              borderColorSet = true;
            }

		//------------------------
		// Stop Drag and Drop
		//------------------------



		]]>
	</mx:Script>



	<!-- header area -->
		<mx:VBox>
	<mx:Canvas
	cornerRadius="10"
	borderStyle="solid"
	backgroundColor="#A9A9A9"
	width="550"
	height="30"
	>
		<mx:HBox height="50">
			<mx:Spacer width="20"/>
<!--
			<mx:Button label="("/>
			<mx:Button label=")"/>
			<mx:Button label="U"/>
			<mx:Button label="N"/>

			<mx:Spacer width="20"/>

-->
			<mx:Label text="Term: "/>
			<mx:TextInput id="term"/>
			<mx:Button label="Add" click="lawl()"/>

		</mx:HBox>
	</mx:Canvas>


	<mx:Canvas
	cornerRadius="10"
	borderStyle="solid"
	backgroundColor="#A9A9A9"
	width="550"
	height="400"
	>

			<mx:HorizontalList id="secondList" 
liveScrolling="false" showScrollTips="true"
			columnWidth="1000"
			paddingLeft="10"
			width="530"
			height="350"
			borderStyle="dotted"
			backgroundColor="#A9A9A9"
			borderThickness="2"
			dragEnabled="true"
			dragMoveEnabled="true"
			dropEnabled="true"
			dragOver="dragOverHandler(event);"
			dragDrop="dragExitHandler(event);"
			dragExit="dragExitHandler(event);"/>

	</mx:Canvas>

	<!-- Drag and Drop code -->
	<!-- http://livedocs.adobe.com/flex/3/html/help.html?content=dragdrop_7.html -->
	    <mx:HBox id="myHB">


	      <mx:HorizontalList id="firstList" 
			borderStyle="dotted"
			backgroundColor="#A9A9A9"
		    borderThickness="2"
		    dragEnabled="true"
		    dropEnabled="false"
			dragMoveEnabled="false"
			width="500"
			height="50"
			columnWidth="100"
			columnCount="3"
		    dragOver="dragOverHandler(event);"
		    dragDrop="dragExitHandler(event);"
		    dragExit="dragExitHandler(event);"
		/>
	    </mx:HBox>
	    
	    <mx:Button id="b1" 
		label="Reset"
		click="initApp()"
	    />
	<!-- End Drag and Drop -->

	</mx:VBox>

	<mx:VBox >

	<mx:Spacer height="1"/>

        <mx:HBox>
            <mx:Button label="Synonyms" click="accordion.selectedIndex=0;"/>
            <mx:Button label="Antonyms" click="accordion.selectedIndex=1;"/>
        </mx:HBox>

	<mx:Spacer height="2"/>

	<mx:Canvas
	borderStyle="solid"
	width="200"
	height="390"
	>

		<mx:Accordion id="accordion" width="100%" height="100%">
		    <!-- Define each panel using a VBox container. -->
		    <mx:VBox label="Synonyms" width="100%" id="VB1">
			<mx:List id="synonymsList" width="100%"
			borderStyle="dotted"
		    borderThickness="2"
		    dragEnabled="true"
		    dropEnabled="false"
			dragMoveEnabled="true"
		    dragOver="dragOverHandler(event);"
		    dragDrop="dragExitHandler(event);"
		    dragExit="dragExitHandler(event);"
			>
			</mx:List>
		    </mx:VBox>

		    <mx:VBox label="Antonyms" width="100%" id="lawl2">
			<mx:List width="100%"
			dataProvider="{antonymsList}"
			borderStyle="dotted"
		    borderThickness="2"
		    dragEnabled="true"
		    dropEnabled="false"
			dragMoveEnabled="true"
		    dragOver="dragOverHandler(event);"
		    dragDrop="dragExitHandler(event);"
		    dragExit="dragExitHandler(event);"
			doubleClickEnabled="true"
                        doubleClick="appendText(event.value);"
			>
			</mx:List>
		    </mx:VBox>



		</mx:Accordion>

	</mx:Canvas>
	</mx:VBox>

                <mx:Button id="button"
                        label="[double] click me"
			doubleClickEnabled="true"
                        doubleClick="appendText(event);" />

</mx:Application>
